# -*- coding: utf-8 -*-
"""Лабораторная работа №6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GMdIRzhOTPF5hmkeRjNfK-v8HSwwR4Xf
"""

import matplotlib.pyplot as plt

celsius = [[-67.0], [-34.0], [0], [34.0], [54.0], [67.0], [100]]
fahrenheit = [[-88.6], [-29.2], [32.0], [93.2], [129.2], [152.6], [212.0]]
plt.figure(figsize=(15,8),dpi=50)
plt.scatter(celsius, fahrenheit, label='входные значения', color='green', marker='$f$');
plt.xlabel('celsius')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.show()
for c,f in zip(celsius, fahrenheit):
  print(f'цельсия{c}= фаренгейт {f}')
from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(celsius, fahrenheit)

lr.predict([[256], [123]])

lr.coef_

lr.intercept_

celsius_test = [[-50], [10], [30], [20], [10], [70], [87]]
fahrenheit_test = lr.predict(celsius_test)

fahrenheit_test
for c,f in zip(celsius_test, fahrenheit_test):
  print(f'цельсия {c} фаренгейта{f}' )
import numpy as np

x_range = np.arange(-70, 120)
y_range = x_range*1.8+32

plt.figure(figsize=(15,8), dpi=280)
plt.plot(x_range, y_range, label='уравнение', linewidth='1')
plt.scatter(celsius, fahrenheit, label='входные данные', color='green')
plt.scatter(celsius_test, fahrenheit_test, label=' предсказанное значение', color='blue')
plt.xlabel('Цельсия')
plt.ylabel('Фаренгейта')
plt.legend()
plt.grid(True)
plt.show



import matplotlib.pyplot as plt

fahrenheit = [[-555.0], [-500.0], [-459.67], [-200], [0], [200], [400]]
kelvin = [[-52.96], [-22.41], [0], [144.26], [255.37], [366.48], [477.59]]
plt.figure(figsize=(15,8),dpi=50)
plt.scatter(kelvin, fahrenheit, label='входные значения', color='green', marker='$f$');
plt.xlabel('kelvin')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.show()
for f,k in zip(fahrenheit, kelvin):
  print(f'фаренгейта{f}= кельвин {k}')
from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(fahrenheit, kelvin)

lr.predict([[256], [123]])

lr.coef_

lr.intercept_

fahrenheit_test = [[-50], [10], [30], [20], [10], [70], [87]]
kelvin_test = lr.predict(fahrenheit_test)

kelvin_test
for f,k in zip(fahrenheit_test, kelvin_test):
  print(f'фаренгейта {f} кельвина{k}' )
import numpy as np

x_range = np.arange(-70, 120)
y_range = (x_range-32) * (5/9) + 273,15

plt.figure(figsize=(15,8), dpi=280)
'''plt.plot(x_range, y_range, label='уравнение', linewidth='1')'''
plt.scatter(fahrenheit, kelvin, label='входные данные', color='green')
plt.scatter(fahrenheit_test, kelvin_test, label=' предсказанное значение', color='blue')
plt.xlabel('Фаренгейта')
plt.ylabel('Кельвина')
plt.legend()
plt.grid(True)
plt.show

"""https://github.com/MishaChesnokov46/--311-.-..git"""

import numpy as np
import matplotlib.pyplot as plt

phi = np.linspace(0, 2.*np.pi, 100)
plt.plot(phi, np.sin(phi))
plt.plot(phi, np.cos(phi))

plt.show()

rg = np.random.Generator(np.random.PCG64(5))

means = (0.5, 0.9)
covar = [
    [1., 0.6],
    [0.6, 1.]
]
data = rg.multivariate_normal(means, covar, 5000)

plt.scatter(data[:,0], data[:,1], marker='o', s=1)

import numpy as np
import matplotlib.pyplot as plt

rg = np.random.Generator(np.random.PCG64(5))
data = rg.poisson(145, 10000)
plt.hist(data, bins=40)

import math
print(math.e)
print(math.pi)
print(math.nan)
print(math.factorial(22))
print(math.gcd(22, 8))

from scipy import stats

means = (0.5, 0.9)
covar = [
    [1., 0.6],
    [0.6, 1.]
]

mvn = stats.multivariate_normal(means, covar)
x, y = np.meshgrid(
    np.linspace(-3, 3, 80),
    np.linspace(-2, 4, 80)
)
data = np.dstack((x, y))
plt.contourf(x, y, mvn.pdf(data), levels=10)

import tensorflow as tf
import numpy as np
from tensorflow import keras
bedrooms = np.array([2, 4, 5, 7, 10, 0])
prices = np.array([150, 250, 300, 400, 550, 50])
model = tf.keras.Sequential([
        keras.layers.Dense(units=1, input_shape=(1,))
        ])
model.compile(optimizer='sgd', loss='mean_squared_error')
model.fit(bedrooms, prices, epochs=100)
print("Price of the 8-bedroom house is: ", model.predict([10.0]))
print('Kernel value:', model.weights[0].numpy()[0,0])
print('Bias value:', model.weights[1].numpy()[0])

import tensorflow as tf
import matplotlib.pyplot as plt

mnist = tf.keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

print("Few pixel values BEFORE normalization: \n", train_images[0,20:26,20:26])
train_images  = train_images / 255.0
test_images = test_images / 255.0
print("\nFew pixel values AFTER normalization: \n", train_images[0,20:26,20:26])

model = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape=(28,28)),
                                    tf.keras.layers.Dense(256, activation=tf.nn.relu),
                                    tf.keras.layers.Dense(10, activation=tf.nn.softmax)])

print(model.summary())

model.compile(optimizer = tf.keras.optimizers.Adam(),
              loss = 'sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=5, validation_data=(test_images,test_labels))

plt.plot(model.history.history['accuracy'],label='Train Accuracy')
plt.plot(model.history.history['val_accuracy'],label='Test Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.savefig('accuracy_plot.png')

plt.close()
plt.plot(model.history.history['loss'],label='Train Loss')
plt.plot(model.history.history['val_loss'],label='Test Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.savefig('loss_plot.png')

model.evaluate(test_images, test_labels)